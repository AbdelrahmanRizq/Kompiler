// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parsetable.proto

#ifndef PROTOBUF_parsetable_2eproto__INCLUDED
#define PROTOBUF_parsetable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_parsetable_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsParseTable_EntryImpl();
void InitDefaultsParseTable_Entry();
void InitDefaultsParseTableImpl();
void InitDefaultsParseTable();
inline void InitDefaults() {
  InitDefaultsParseTable_Entry();
  InitDefaultsParseTable();
}
}  // namespace protobuf_parsetable_2eproto
namespace parser {
class ParseTable;
class ParseTableDefaultTypeInternal;
extern ParseTableDefaultTypeInternal _ParseTable_default_instance_;
class ParseTable_Entry;
class ParseTable_EntryDefaultTypeInternal;
extern ParseTable_EntryDefaultTypeInternal _ParseTable_Entry_default_instance_;
}  // namespace parser
namespace parser {

enum ParseTable_Entry_States {
  ParseTable_Entry_States_ERROR = 0,
  ParseTable_Entry_States_SYNC = 1,
  ParseTable_Entry_States_PROD = 2
};
bool ParseTable_Entry_States_IsValid(int value);
const ParseTable_Entry_States ParseTable_Entry_States_States_MIN = ParseTable_Entry_States_ERROR;
const ParseTable_Entry_States ParseTable_Entry_States_States_MAX = ParseTable_Entry_States_PROD;
const int ParseTable_Entry_States_States_ARRAYSIZE = ParseTable_Entry_States_States_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParseTable_Entry_States_descriptor();
inline const ::std::string& ParseTable_Entry_States_Name(ParseTable_Entry_States value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParseTable_Entry_States_descriptor(), value);
}
inline bool ParseTable_Entry_States_Parse(
    const ::std::string& name, ParseTable_Entry_States* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParseTable_Entry_States>(
    ParseTable_Entry_States_descriptor(), name, value);
}
// ===================================================================

class ParseTable_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:parser.ParseTable.Entry) */ {
 public:
  ParseTable_Entry();
  virtual ~ParseTable_Entry();

  ParseTable_Entry(const ParseTable_Entry& from);

  inline ParseTable_Entry& operator=(const ParseTable_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParseTable_Entry(ParseTable_Entry&& from) noexcept
    : ParseTable_Entry() {
    *this = ::std::move(from);
  }

  inline ParseTable_Entry& operator=(ParseTable_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParseTable_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParseTable_Entry* internal_default_instance() {
    return reinterpret_cast<const ParseTable_Entry*>(
               &_ParseTable_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ParseTable_Entry* other);
  friend void swap(ParseTable_Entry& a, ParseTable_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParseTable_Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  ParseTable_Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParseTable_Entry& from);
  void MergeFrom(const ParseTable_Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParseTable_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ParseTable_Entry_States States;
  static const States ERROR =
    ParseTable_Entry_States_ERROR;
  static const States SYNC =
    ParseTable_Entry_States_SYNC;
  static const States PROD =
    ParseTable_Entry_States_PROD;
  static inline bool States_IsValid(int value) {
    return ParseTable_Entry_States_IsValid(value);
  }
  static const States States_MIN =
    ParseTable_Entry_States_States_MIN;
  static const States States_MAX =
    ParseTable_Entry_States_States_MAX;
  static const int States_ARRAYSIZE =
    ParseTable_Entry_States_States_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  States_descriptor() {
    return ParseTable_Entry_States_descriptor();
  }
  static inline const ::std::string& States_Name(States value) {
    return ParseTable_Entry_States_Name(value);
  }
  static inline bool States_Parse(const ::std::string& name,
      States* value) {
    return ParseTable_Entry_States_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string productions = 4;
  int productions_size() const;
  void clear_productions();
  static const int kProductionsFieldNumber = 4;
  const ::std::string& productions(int index) const;
  ::std::string* mutable_productions(int index);
  void set_productions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_productions(int index, ::std::string&& value);
  #endif
  void set_productions(int index, const char* value);
  void set_productions(int index, const char* value, size_t size);
  ::std::string* add_productions();
  void add_productions(const ::std::string& value);
  #if LANG_CXX11
  void add_productions(::std::string&& value);
  #endif
  void add_productions(const char* value);
  void add_productions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& productions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_productions();

  // required string nonterm = 2;
  bool has_nonterm() const;
  void clear_nonterm();
  static const int kNontermFieldNumber = 2;
  const ::std::string& nonterm() const;
  void set_nonterm(const ::std::string& value);
  #if LANG_CXX11
  void set_nonterm(::std::string&& value);
  #endif
  void set_nonterm(const char* value);
  void set_nonterm(const char* value, size_t size);
  ::std::string* mutable_nonterm();
  ::std::string* release_nonterm();
  void set_allocated_nonterm(::std::string* nonterm);

  // required string term = 3;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 3;
  const ::std::string& term() const;
  void set_term(const ::std::string& value);
  #if LANG_CXX11
  void set_term(::std::string&& value);
  #endif
  void set_term(const char* value);
  void set_term(const char* value, size_t size);
  ::std::string* mutable_term();
  ::std::string* release_term();
  void set_allocated_term(::std::string* term);

  // required .parser.ParseTable.Entry.States state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::parser::ParseTable_Entry_States state() const;
  void set_state(::parser::ParseTable_Entry_States value);

  // @@protoc_insertion_point(class_scope:parser.ParseTable.Entry)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_nonterm();
  void clear_has_nonterm();
  void set_has_term();
  void clear_has_term();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> productions_;
  ::google::protobuf::internal::ArenaStringPtr nonterm_;
  ::google::protobuf::internal::ArenaStringPtr term_;
  int state_;
  friend struct ::protobuf_parsetable_2eproto::TableStruct;
  friend void ::protobuf_parsetable_2eproto::InitDefaultsParseTable_EntryImpl();
};
// -------------------------------------------------------------------

class ParseTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:parser.ParseTable) */ {
 public:
  ParseTable();
  virtual ~ParseTable();

  ParseTable(const ParseTable& from);

  inline ParseTable& operator=(const ParseTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParseTable(ParseTable&& from) noexcept
    : ParseTable() {
    *this = ::std::move(from);
  }

  inline ParseTable& operator=(ParseTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParseTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParseTable* internal_default_instance() {
    return reinterpret_cast<const ParseTable*>(
               &_ParseTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ParseTable* other);
  friend void swap(ParseTable& a, ParseTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParseTable* New() const PROTOBUF_FINAL { return New(NULL); }

  ParseTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParseTable& from);
  void MergeFrom(const ParseTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParseTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ParseTable_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .parser.ParseTable.Entry entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  const ::parser::ParseTable_Entry& entries(int index) const;
  ::parser::ParseTable_Entry* mutable_entries(int index);
  ::parser::ParseTable_Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::parser::ParseTable_Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::parser::ParseTable_Entry >&
      entries() const;

  // required string starting_symbol = 1;
  bool has_starting_symbol() const;
  void clear_starting_symbol();
  static const int kStartingSymbolFieldNumber = 1;
  const ::std::string& starting_symbol() const;
  void set_starting_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_starting_symbol(::std::string&& value);
  #endif
  void set_starting_symbol(const char* value);
  void set_starting_symbol(const char* value, size_t size);
  ::std::string* mutable_starting_symbol();
  ::std::string* release_starting_symbol();
  void set_allocated_starting_symbol(::std::string* starting_symbol);

  // @@protoc_insertion_point(class_scope:parser.ParseTable)
 private:
  void set_has_starting_symbol();
  void clear_has_starting_symbol();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::parser::ParseTable_Entry > entries_;
  ::google::protobuf::internal::ArenaStringPtr starting_symbol_;
  friend struct ::protobuf_parsetable_2eproto::TableStruct;
  friend void ::protobuf_parsetable_2eproto::InitDefaultsParseTableImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParseTable_Entry

// required .parser.ParseTable.Entry.States state = 1;
inline bool ParseTable_Entry::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParseTable_Entry::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParseTable_Entry::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParseTable_Entry::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::parser::ParseTable_Entry_States ParseTable_Entry::state() const {
  // @@protoc_insertion_point(field_get:parser.ParseTable.Entry.state)
  return static_cast< ::parser::ParseTable_Entry_States >(state_);
}
inline void ParseTable_Entry::set_state(::parser::ParseTable_Entry_States value) {
  assert(::parser::ParseTable_Entry_States_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:parser.ParseTable.Entry.state)
}

// required string nonterm = 2;
inline bool ParseTable_Entry::has_nonterm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParseTable_Entry::set_has_nonterm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParseTable_Entry::clear_has_nonterm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParseTable_Entry::clear_nonterm() {
  nonterm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nonterm();
}
inline const ::std::string& ParseTable_Entry::nonterm() const {
  // @@protoc_insertion_point(field_get:parser.ParseTable.Entry.nonterm)
  return nonterm_.GetNoArena();
}
inline void ParseTable_Entry::set_nonterm(const ::std::string& value) {
  set_has_nonterm();
  nonterm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:parser.ParseTable.Entry.nonterm)
}
#if LANG_CXX11
inline void ParseTable_Entry::set_nonterm(::std::string&& value) {
  set_has_nonterm();
  nonterm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:parser.ParseTable.Entry.nonterm)
}
#endif
inline void ParseTable_Entry::set_nonterm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nonterm();
  nonterm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:parser.ParseTable.Entry.nonterm)
}
inline void ParseTable_Entry::set_nonterm(const char* value, size_t size) {
  set_has_nonterm();
  nonterm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:parser.ParseTable.Entry.nonterm)
}
inline ::std::string* ParseTable_Entry::mutable_nonterm() {
  set_has_nonterm();
  // @@protoc_insertion_point(field_mutable:parser.ParseTable.Entry.nonterm)
  return nonterm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParseTable_Entry::release_nonterm() {
  // @@protoc_insertion_point(field_release:parser.ParseTable.Entry.nonterm)
  clear_has_nonterm();
  return nonterm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParseTable_Entry::set_allocated_nonterm(::std::string* nonterm) {
  if (nonterm != NULL) {
    set_has_nonterm();
  } else {
    clear_has_nonterm();
  }
  nonterm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonterm);
  // @@protoc_insertion_point(field_set_allocated:parser.ParseTable.Entry.nonterm)
}

// required string term = 3;
inline bool ParseTable_Entry::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParseTable_Entry::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParseTable_Entry::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParseTable_Entry::clear_term() {
  term_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_term();
}
inline const ::std::string& ParseTable_Entry::term() const {
  // @@protoc_insertion_point(field_get:parser.ParseTable.Entry.term)
  return term_.GetNoArena();
}
inline void ParseTable_Entry::set_term(const ::std::string& value) {
  set_has_term();
  term_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:parser.ParseTable.Entry.term)
}
#if LANG_CXX11
inline void ParseTable_Entry::set_term(::std::string&& value) {
  set_has_term();
  term_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:parser.ParseTable.Entry.term)
}
#endif
inline void ParseTable_Entry::set_term(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_term();
  term_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:parser.ParseTable.Entry.term)
}
inline void ParseTable_Entry::set_term(const char* value, size_t size) {
  set_has_term();
  term_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:parser.ParseTable.Entry.term)
}
inline ::std::string* ParseTable_Entry::mutable_term() {
  set_has_term();
  // @@protoc_insertion_point(field_mutable:parser.ParseTable.Entry.term)
  return term_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParseTable_Entry::release_term() {
  // @@protoc_insertion_point(field_release:parser.ParseTable.Entry.term)
  clear_has_term();
  return term_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParseTable_Entry::set_allocated_term(::std::string* term) {
  if (term != NULL) {
    set_has_term();
  } else {
    clear_has_term();
  }
  term_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), term);
  // @@protoc_insertion_point(field_set_allocated:parser.ParseTable.Entry.term)
}

// repeated string productions = 4;
inline int ParseTable_Entry::productions_size() const {
  return productions_.size();
}
inline void ParseTable_Entry::clear_productions() {
  productions_.Clear();
}
inline const ::std::string& ParseTable_Entry::productions(int index) const {
  // @@protoc_insertion_point(field_get:parser.ParseTable.Entry.productions)
  return productions_.Get(index);
}
inline ::std::string* ParseTable_Entry::mutable_productions(int index) {
  // @@protoc_insertion_point(field_mutable:parser.ParseTable.Entry.productions)
  return productions_.Mutable(index);
}
inline void ParseTable_Entry::set_productions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:parser.ParseTable.Entry.productions)
  productions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ParseTable_Entry::set_productions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:parser.ParseTable.Entry.productions)
  productions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ParseTable_Entry::set_productions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  productions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:parser.ParseTable.Entry.productions)
}
inline void ParseTable_Entry::set_productions(int index, const char* value, size_t size) {
  productions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parser.ParseTable.Entry.productions)
}
inline ::std::string* ParseTable_Entry::add_productions() {
  // @@protoc_insertion_point(field_add_mutable:parser.ParseTable.Entry.productions)
  return productions_.Add();
}
inline void ParseTable_Entry::add_productions(const ::std::string& value) {
  productions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:parser.ParseTable.Entry.productions)
}
#if LANG_CXX11
inline void ParseTable_Entry::add_productions(::std::string&& value) {
  productions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:parser.ParseTable.Entry.productions)
}
#endif
inline void ParseTable_Entry::add_productions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  productions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:parser.ParseTable.Entry.productions)
}
inline void ParseTable_Entry::add_productions(const char* value, size_t size) {
  productions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:parser.ParseTable.Entry.productions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParseTable_Entry::productions() const {
  // @@protoc_insertion_point(field_list:parser.ParseTable.Entry.productions)
  return productions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ParseTable_Entry::mutable_productions() {
  // @@protoc_insertion_point(field_mutable_list:parser.ParseTable.Entry.productions)
  return &productions_;
}

// -------------------------------------------------------------------

// ParseTable

// required string starting_symbol = 1;
inline bool ParseTable::has_starting_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParseTable::set_has_starting_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParseTable::clear_has_starting_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParseTable::clear_starting_symbol() {
  starting_symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_starting_symbol();
}
inline const ::std::string& ParseTable::starting_symbol() const {
  // @@protoc_insertion_point(field_get:parser.ParseTable.starting_symbol)
  return starting_symbol_.GetNoArena();
}
inline void ParseTable::set_starting_symbol(const ::std::string& value) {
  set_has_starting_symbol();
  starting_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:parser.ParseTable.starting_symbol)
}
#if LANG_CXX11
inline void ParseTable::set_starting_symbol(::std::string&& value) {
  set_has_starting_symbol();
  starting_symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:parser.ParseTable.starting_symbol)
}
#endif
inline void ParseTable::set_starting_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_starting_symbol();
  starting_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:parser.ParseTable.starting_symbol)
}
inline void ParseTable::set_starting_symbol(const char* value, size_t size) {
  set_has_starting_symbol();
  starting_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:parser.ParseTable.starting_symbol)
}
inline ::std::string* ParseTable::mutable_starting_symbol() {
  set_has_starting_symbol();
  // @@protoc_insertion_point(field_mutable:parser.ParseTable.starting_symbol)
  return starting_symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParseTable::release_starting_symbol() {
  // @@protoc_insertion_point(field_release:parser.ParseTable.starting_symbol)
  clear_has_starting_symbol();
  return starting_symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParseTable::set_allocated_starting_symbol(::std::string* starting_symbol) {
  if (starting_symbol != NULL) {
    set_has_starting_symbol();
  } else {
    clear_has_starting_symbol();
  }
  starting_symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), starting_symbol);
  // @@protoc_insertion_point(field_set_allocated:parser.ParseTable.starting_symbol)
}

// repeated .parser.ParseTable.Entry entries = 2;
inline int ParseTable::entries_size() const {
  return entries_.size();
}
inline void ParseTable::clear_entries() {
  entries_.Clear();
}
inline const ::parser::ParseTable_Entry& ParseTable::entries(int index) const {
  // @@protoc_insertion_point(field_get:parser.ParseTable.entries)
  return entries_.Get(index);
}
inline ::parser::ParseTable_Entry* ParseTable::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:parser.ParseTable.entries)
  return entries_.Mutable(index);
}
inline ::parser::ParseTable_Entry* ParseTable::add_entries() {
  // @@protoc_insertion_point(field_add:parser.ParseTable.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::parser::ParseTable_Entry >*
ParseTable::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:parser.ParseTable.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::parser::ParseTable_Entry >&
ParseTable::entries() const {
  // @@protoc_insertion_point(field_list:parser.ParseTable.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parser

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::parser::ParseTable_Entry_States> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::parser::ParseTable_Entry_States>() {
  return ::parser::ParseTable_Entry_States_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_parsetable_2eproto__INCLUDED
